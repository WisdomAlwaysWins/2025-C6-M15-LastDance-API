"""restructure database schema

Revision ID: 1ed51918c75e
Revises: 9f63823cac97
Create Date: 2025-10-11 02:48:36.500823

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1ed51918c75e'
down_revision: Union[str, None] = '9f63823cac97'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('artists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='작가 이름'),
    sa.Column('bio', sa.Text(), nullable=True, comment='작가 소개'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='이메일'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_artists_id'), 'artists', ['id'], unique=False)
    op.create_index(op.f('ix_artists_name'), 'artists', ['name'], unique=True)
    op.create_table('venues',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='장소 이름'),
    sa.Column('address', sa.String(length=500), nullable=True, comment='주소'),
    sa.Column('geo_lat', sa.Float(), nullable=True, comment='위도'),
    sa.Column('geo_lon', sa.Float(), nullable=True, comment='경도'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_venues_id'), 'venues', ['id'], unique=False)
    op.create_table('exhibition_artists',
    sa.Column('exhibition_id', sa.Integer(), nullable=False),
    sa.Column('artist_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['exhibition_id'], ['exhibitions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('exhibition_id', 'artist_id')
    )
    op.create_table('reactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artwork_id', sa.Integer(), nullable=False, comment='작품 ID'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='사용자 ID'),
    sa.Column('visit_id', sa.Integer(), nullable=True, comment='방문 ID'),
    sa.Column('photo_url', sa.String(length=500), nullable=True, comment='사용자가 찍은 사진 URL'),
    sa.Column('comment', sa.Text(), nullable=True, comment='텍스트 코멘트'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['artwork_id'], ['artworks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['visit_id'], ['visit_histories.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reactions_id'), 'reactions', ['id'], unique=False)
    op.create_table('reaction_tags',
    sa.Column('reaction_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reaction_id', 'tag_id')
    )
    op.drop_table('review_tags')
    op.drop_index('ix_reviews_id', table_name='reviews')
    op.drop_table('reviews')
    op.add_column('artworks', sa.Column('artist_id', sa.Integer(), nullable=True, comment='작가 ID'))
    op.add_column('artworks', sa.Column('thumbnail_url', sa.String(length=500), nullable=False, comment='작품 이미지 URL'))
    op.add_column('artworks', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('artworks', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.create_foreign_key(None, 'artworks', 'artists', ['artist_id'], ['id'], ondelete='SET NULL')
    op.drop_column('artworks', 'artist_name')
    op.drop_column('artworks', 'image_url')
    op.add_column('exhibitions', sa.Column('description_text', sa.Text(), nullable=True, comment='전시 설명'))
    op.add_column('exhibitions', sa.Column('venue_id', sa.Integer(), nullable=True, comment='장소 ID'))
    op.add_column('exhibitions', sa.Column('cover_image_url', sa.String(length=500), nullable=True, comment='포스터 이미지 URL'))
    op.alter_column('exhibitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='생성 일시',
               existing_server_default=sa.text('now()'))
    op.alter_column('exhibitions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='수정 일시',
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(None, 'exhibitions', 'venues', ['venue_id'], ['id'], ondelete='SET NULL')
    op.drop_column('exhibitions', 'location')
    op.drop_column('exhibitions', 'description')
    op.drop_column('exhibitions', 'poster_url')
    op.drop_column('exhibitions', 'artist_names')
    op.drop_constraint('tags_name_key', 'tags', type_='unique')
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.alter_column('users', 'uuid',
               existing_type=sa.VARCHAR(length=36),
               comment='iOS UUID',
               existing_comment='사용자 고유 식별자 (UUID)',
               existing_nullable=False)
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='사용자 이름',
               existing_comment='사용자 이름 (선택)',
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='생성 일시',
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='수정 일시',
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_users_email', table_name='users')
    op.drop_column('users', 'email')
    op.drop_column('users', 'user_type')
    op.alter_column('visit_histories', 'visited_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment='방문 시각',
               existing_comment='방문 일시',
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('visit_histories', 'visited_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='방문 일시',
               existing_comment='방문 시각',
               existing_server_default=sa.text('now()'))
    op.add_column('users', sa.Column('user_type', postgresql.ENUM('VISITOR', 'ARTIST', name='usertype'), autoincrement=False, nullable=False, comment='사용자 타입 (관람객/작가)'))
    op.add_column('users', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='이메일 (선택)'))
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='수정 일시',
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='생성 일시',
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='사용자 이름 (선택)',
               existing_comment='사용자 이름',
               existing_nullable=True)
    op.alter_column('users', 'uuid',
               existing_type=sa.VARCHAR(length=36),
               comment='사용자 고유 식별자 (UUID)',
               existing_comment='iOS UUID',
               existing_nullable=False)
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.create_unique_constraint('tags_name_key', 'tags', ['name'])
    op.add_column('exhibitions', sa.Column('artist_names', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True, comment='참여 작가 이름 리스트'))
    op.add_column('exhibitions', sa.Column('poster_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='전시 포스터 이미지 URL (S3)'))
    op.add_column('exhibitions', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='전시 설명'))
    op.add_column('exhibitions', sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='전시 장소'))
    op.drop_constraint(None, 'exhibitions', type_='foreignkey')
    op.alter_column('exhibitions', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='수정 일시',
               existing_server_default=sa.text('now()'))
    op.alter_column('exhibitions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='생성 일시',
               existing_server_default=sa.text('now()'))
    op.drop_column('exhibitions', 'cover_image_url')
    op.drop_column('exhibitions', 'venue_id')
    op.drop_column('exhibitions', 'description_text')
    op.add_column('artworks', sa.Column('image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False, comment='작품 원본 이미지 URL (S3)'))
    op.add_column('artworks', sa.Column('artist_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='작가 이름'))
    op.drop_constraint(None, 'artworks', type_='foreignkey')
    op.drop_column('artworks', 'updated_at')
    op.drop_column('artworks', 'created_at')
    op.drop_column('artworks', 'thumbnail_url')
    op.drop_column('artworks', 'artist_id')
    op.create_table('reviews',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('reviews_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('photo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False, comment='관람객이 촬영한 작품 사진 URL (S3)'),
    sa.Column('text_review', sa.TEXT(), autoincrement=False, nullable=True, comment='텍스트 평가 (선택)'),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='사용자 ID'),
    sa.Column('artwork_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='작품 ID'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='생성 일시'),
    sa.ForeignKeyConstraint(['artwork_id'], ['artworks.id'], name='reviews_artwork_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='reviews_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reviews_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_reviews_id', 'reviews', ['id'], unique=False)
    op.create_table('review_tags',
    sa.Column('review_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], name='review_tags_review_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='review_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('review_id', 'tag_id', name='review_tags_pkey')
    )
    op.drop_table('reaction_tags')
    op.drop_index(op.f('ix_reactions_id'), table_name='reactions')
    op.drop_table('reactions')
    op.drop_table('exhibition_artists')
    op.drop_index(op.f('ix_venues_id'), table_name='venues')
    op.drop_table('venues')
    op.drop_index(op.f('ix_artists_name'), table_name='artists')
    op.drop_index(op.f('ix_artists_id'), table_name='artists')
    op.drop_table('artists')
    # ### end Alembic commands ###
